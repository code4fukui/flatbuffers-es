// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'https://code4fukui.github.io/flatbuffers-es/es/index.js';
export var Color;
(function (Color) {
    Color[Color["Red"] = 0] = "Red";
    Color[Color["Green"] = 1] = "Green";
    Color[Color["Blue"] = 2] = "Blue";
})(Color || (Color = {}));
export var Equipment;
(function (Equipment) {
    Equipment[Equipment["NONE"] = 0] = "NONE";
    Equipment[Equipment["Weapon"] = 1] = "Weapon";
})(Equipment || (Equipment = {}));
export function unionToEquipment(type, accessor) {
    switch (Equipment[type]) {
        case 'NONE': return null;
        case 'Weapon': return accessor(new Weapon());
        default: return null;
    }
}
export function unionListToEquipment(type, accessor, index) {
    switch (Equipment[type]) {
        case 'NONE': return null;
        case 'Weapon': return accessor(index, new Weapon());
        default: return null;
    }
}
export class Vec3 {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    x() {
        return this.bb.readFloat32(this.bb_pos);
    }
    y() {
        return this.bb.readFloat32(this.bb_pos + 4);
    }
    z() {
        return this.bb.readFloat32(this.bb_pos + 8);
    }
    static sizeOf() {
        return 12;
    }
    static createVec3(builder, x, y, z) {
        builder.prep(4, 12);
        builder.writeFloat32(z);
        builder.writeFloat32(y);
        builder.writeFloat32(x);
        return builder.offset();
    }
}
export class Monster {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMonster(bb, obj) {
        return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMonster(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    pos(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb) : null;
    }
    mana() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 150;
    }
    hp() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 100;
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    inventory(index) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    inventoryLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    inventoryArray() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    color() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : Color.Blue;
    }
    weapons(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new Weapon()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    weaponsLength() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    equippedType() {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : Equipment.NONE;
    }
    equipped(obj) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    path(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? (obj || new Vec3()).__init(this.bb.__vector(this.bb_pos + offset) + index * 12, this.bb) : null;
    }
    pathLength() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startMonster(builder) {
        builder.startObject(11);
    }
    static addPos(builder, posOffset) {
        builder.addFieldStruct(0, posOffset, 0);
    }
    static addMana(builder, mana) {
        builder.addFieldInt16(1, mana, 150);
    }
    static addHp(builder, hp) {
        builder.addFieldInt16(2, hp, 100);
    }
    static addName(builder, nameOffset) {
        builder.addFieldOffset(3, nameOffset, 0);
    }
    static addInventory(builder, inventoryOffset) {
        builder.addFieldOffset(5, inventoryOffset, 0);
    }
    static createInventoryVector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static startInventoryVector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static addColor(builder, color) {
        builder.addFieldInt8(6, color, Color.Blue);
    }
    static addWeapons(builder, weaponsOffset) {
        builder.addFieldOffset(7, weaponsOffset, 0);
    }
    static createWeaponsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startWeaponsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addEquippedType(builder, equippedType) {
        builder.addFieldInt8(8, equippedType, Equipment.NONE);
    }
    static addEquipped(builder, equippedOffset) {
        builder.addFieldOffset(9, equippedOffset, 0);
    }
    static addPath(builder, pathOffset) {
        builder.addFieldOffset(10, pathOffset, 0);
    }
    static startPathVector(builder, numElems) {
        builder.startVector(12, numElems, 4);
    }
    static endMonster(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishMonsterBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedMonsterBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createMonster(builder, posOffset, mana, hp, nameOffset, inventoryOffset, color, weaponsOffset, equippedType, equippedOffset, pathOffset) {
        Monster.startMonster(builder);
        Monster.addPos(builder, posOffset);
        Monster.addMana(builder, mana);
        Monster.addHp(builder, hp);
        Monster.addName(builder, nameOffset);
        Monster.addInventory(builder, inventoryOffset);
        Monster.addColor(builder, color);
        Monster.addWeapons(builder, weaponsOffset);
        Monster.addEquippedType(builder, equippedType);
        Monster.addEquipped(builder, equippedOffset);
        Monster.addPath(builder, pathOffset);
        return Monster.endMonster(builder);
    }
}
export class Weapon {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsWeapon(bb, obj) {
        return (obj || new Weapon()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsWeapon(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Weapon()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    damage() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
    }
    static startWeapon(builder) {
        builder.startObject(2);
    }
    static addName(builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    }
    static addDamage(builder, damage) {
        builder.addFieldInt16(1, damage, 0);
    }
    static endWeapon(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createWeapon(builder, nameOffset, damage) {
        Weapon.startWeapon(builder);
        Weapon.addName(builder, nameOffset);
        Weapon.addDamage(builder, damage);
        return Weapon.endWeapon(builder);
    }
}
